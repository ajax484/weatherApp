{"version":3,"sources":["components/TemperatureList.js","components/Functions.js","components/DateTime.js","components/Area.js","components/Form.js","Weather.js","index.js"],"names":["TemperatureList","temperatureList","this","props","className","map","day","key","src","weatherIcon","alt","weatherDescription","temperature","Component","dayNames","monthNames","dateToDay","date","getDay","dateToString","getDate","getMonth","dateToMonth","getFullYear","getDateTimeFromTimezone","value","Date","getTime","getTimezoneOffset","parseInt","DateTime","timezone","state","time","timeTick","bind","timerID","setInterval","tick","setState","toLocaleTimeString","hour","minute","clearInterval","prevProps","Area","code","city","country","Intl","DisplayNames","type","of","Form","onChange","onSubmit","PATH_BASE","API_KEY","Weather","weather","searchCity","currentCity","error","isFetched","needsToFetchWeather","setSearchWeather","fetchPreviousWeather","fetchWeather","onSearchChange","onSearchSubmit","console","log","res","list","name","weatherList","forEach","item","unix","dt","temp","push","icon","newWeather","count","api","axios","then","data","catch","event","target","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6a2284c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst PATH_ICON_URL = 'http://openweathermap.org/img/wn/';\r\nconst PATH_APPEND = '@2x.png';\r\n\r\nexport default class TemperatureList extends Component {\r\n\r\n    render() {\r\n        const { temperatureList } = this.props;\r\n\r\n        return (\r\n            <div className='temperature-list'>\r\n                {temperatureList.map((day) => {\r\n                    return (\r\n                        <div className='day-item' key={day.day}>\r\n                            <h4 className='day'>{day.day}</h4>\r\n                            <img src={`${PATH_ICON_URL}${day.weatherIcon}${PATH_APPEND}`} alt={`${day.weatherDescription}`} />\r\n                            <h2 className='temp'>{day.temperature}&deg;</h2>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}","const dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n//convert date to dayNames\r\nexport const dateToDay = date => dayNames[date.getDay()];\r\n\r\n//convert date to monthnames \r\nexport const dateToMonth = date => monthNames[date.getMonth()];\r\n\r\n//format full date\r\nexport const dateToString = date => `${dateToDay(date)}, ${date.getDate()} ${dateToMonth(date)} ${date.getFullYear()}`;\r\n\r\n//convert unix time to dayNames\r\nexport const unixToDay = unix => dateToDay(new Date(unix * 1000));\r\n\r\n//get time from time value\r\nexport const getDateTimeFromTimezone = (value) => new Date(new Date().getTime() + (((new Date().getTimezoneOffset()*60) + parseInt(value))*1000));\r\n\r\n//convert country code to country name\r\nexport const countryCodeToCountryName = (code) =>\r\n    new Intl.DisplayNames(\r\n        ['en'], { type: 'region' }\r\n    ).of(code);\r\n","import React, { Component } from 'react';\r\nimport { dateToString, getDateTimeFromTimezone } from './Functions';\r\n\r\n\r\n// export default class DateTime extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             date: new Date(),\r\n//             time: new Date()\r\n//         }\r\n\r\n//         this.timeTick = this.timeTick.bind(this);\r\n//     }\r\n\r\n\r\n//     timeTick() {\r\n//         this.timerID = setInterval(() => this.tick(), 1000);\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         this.timeTick();\r\n//     }\r\n\r\n//     componentWillUnmount() {\r\n//         clearInterval(this.timerID);\r\n//     }\r\n\r\n//     tick() {\r\n//         this.setState({\r\n//             date: new Date(),\r\n//             time: new Date()\r\n//         });\r\n//     }\r\n\r\n//     render() {\r\n//         const { date, time } = this.state;\r\n//         return (\r\n//             <div className=\"date-time\">\r\n//                 <h1 className=\"time\">\r\n//                     {/* display time in hour and minute */}\r\n//                     {time.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric' })}\r\n//                 </h1><br />\r\n//                 <h3 className=\"date\">\r\n//                     {dateToString(date)}\r\n//                 </h3>\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n// }\r\n\r\nexport default class DateTime extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const { timezone } = props;\r\n\r\n        this.state = {\r\n            date: getDateTimeFromTimezone(timezone),\r\n            time: getDateTimeFromTimezone(timezone),\r\n            timezone\r\n        }\r\n\r\n        this.timeTick = this.timeTick.bind(this);\r\n    }\r\n\r\n\r\n    timeTick() {\r\n        this.timerID = setInterval(() => this.tick(), 1000);\r\n    }\r\n\r\n    tick() {\r\n        const { timezone } = this.state;\r\n\r\n        this.setState({\r\n            date: getDateTimeFromTimezone(timezone),\r\n            time: getDateTimeFromTimezone(timezone)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { date, time } = this.state;\r\n        return (\r\n            <div className=\"date-time\">\r\n                <h1 className=\"time\">\r\n                    {/* display time in hour and minute */}\r\n                    {time.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric' })}\r\n                </h1><br />\r\n                <h3 className=\"date\">\r\n                    {dateToString(date)}\r\n                </h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() { this.timeTick() }\r\n\r\n    componentWillUnmount() { clearInterval(this.timerID) }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.timezone !== prevProps.timezone) {\r\n            this.setState({\r\n                timezone: this.props.timezone\r\n            });\r\n        }\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { countryCodeToCountryName } from './Functions';\r\n\r\nexport default class Area extends Component {\r\n    render() {\r\n        const {city, country} = this.props;\r\n        return (\r\n            <div className=\"area\">\r\n                <h1 className=\"city\">\r\n                    {city}\r\n                </h1><br/>\r\n                <h3 className=\"country\">\r\n                    {countryCodeToCountryName(country)}\r\n                </h3>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Form extends Component {\r\n    render() {\r\n        const { value, onChange, onSubmit } = this.props;\r\n        return (\r\n            <form onSubmit={onSubmit} className='weather-form'>\r\n                <input type=\"text\" value={value} onChange={onChange}/>\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TemperatureList from './components/TemperatureList';\r\nimport DateTime from './components/DateTime';\r\nimport Area from './components/Area';\r\nimport Form from './components/Form';\r\n\r\nimport './assets/weather.css';\r\nimport { unixToDay } from './components/Functions';\r\n\r\n//weather api call using axios\r\nconst DEFAULT_CITY = 'lagos';\r\n\r\nconst PATH_BASE = 'http://api.openweathermap.org/data/2.5/forecast';\r\nconst PATH_SEARCH = '/daily?';\r\nconst PATH_CITY = 'q=';\r\nconst PATH_COUNT = 'cnt=';\r\nconst PATH_UNIT = 'units=metric';\r\nconst PATH_APPID = 'appid=';\r\nconst API_KEY = 'c0c4a4b4047b97ebc5948ac9c48c0559';\r\n\r\n// const temperatureListe = [\r\n//     { day: 'Mon', temp: 12, icon: 'sun', weather: 'sunny' },\r\n//     { day: 'Tue', temp: 10, icon: 'sun', weather: 'cloudy' },\r\n//     { day: 'Wed', temp: 8, icon: 'sun', weather: 'windy' },\r\n//     { day: 'Thu', temp: 8, icon: 'sun', weather: 'drizzle' },\r\n//     { day: 'Fri', temp: 4, icon: 'sun', weather: 'rainy' },\r\n//     { day: 'Sat', temp: -2, icon: 'sun', weather: 'snow' },\r\n//     { day: 'Sun', temp: 12, icon: 'sun', weather: 'sunny' }\r\n// ];\r\n\r\n\r\nexport default class Weather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            weather: null,\r\n            searchCity: DEFAULT_CITY,\r\n            currentCity: null,\r\n            error: null,\r\n            isFetched: false\r\n        }\r\n\r\n        this.needsToFetchWeather = this.needsToFetchWeather.bind(this);\r\n        this.setSearchWeather = this.setSearchWeather.bind(this);\r\n        this.fetchPreviousWeather = this.fetchPreviousWeather.bind(this);\r\n        this.fetchWeather = this.fetchWeather.bind(this);\r\n        this.onSearchChange = this.onSearchChange.bind(this);\r\n        this.onSearchSubmit = this.onSearchSubmit.bind(this);\r\n    }\r\n\r\n    needsToFetchWeather(searchCity) {\r\n        console.log(this.state.weather[searchCity]);\r\n        return !this.state.weather[searchCity];\r\n    }\r\n\r\n    setSearchWeather(res, searchCity) {\r\n        const { city, list } = res;\r\n        const { name, country, timezone } = city;\r\n        const weatherList = this.state.weather;\r\n        const temperatureList = [];\r\n\r\n        list.forEach(item => {\r\n            const { dt, temp, weather } = item;\r\n\r\n            temperatureList.push(\r\n                {\r\n                    day: unixToDay(dt),\r\n                    temperature: temp.day,\r\n                    weatherDescription: weather[0].weatherDescription,\r\n                    weatherIcon: weather[0].icon\r\n                }\r\n            );\r\n        });\r\n\r\n        const currentCity = {\r\n            city: name,\r\n            country,\r\n            timezone,\r\n            temperatureList\r\n        }\r\n\r\n        const newWeather = {\r\n            [searchCity]: currentCity,\r\n            ...weatherList\r\n        }\r\n\r\n        this.setState({\r\n            isFetched: true,\r\n            searchCity,\r\n            currentCity,\r\n            weather: newWeather\r\n        })\r\n\r\n        // console.log(newWeather);\r\n        console.log('api call:', this.state.currentCity);\r\n    }\r\n\r\n    fetchPreviousWeather(searchCity) {\r\n        const { weather } = this.state;\r\n\r\n        weather[searchCity] && this.setState({\r\n            currentCity: weather[searchCity]\r\n        })\r\n\r\n        console.log('cache log:', this.state.currentCity)\r\n    }\r\n\r\n\r\n    fetchWeather(searchCity, count = 7) {\r\n        const api = `${PATH_BASE}${PATH_SEARCH}${PATH_CITY}${searchCity}&${PATH_COUNT}${count}&${PATH_UNIT}&${PATH_APPID}${API_KEY}`;\r\n\r\n        axios(api)\r\n            .then(res => {\r\n                this.setSearchWeather(res.data, searchCity)\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error });\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    onSearchChange(event) {\r\n        this.setState({\r\n            searchCity: event.target.value\r\n        });\r\n    }\r\n\r\n    onSearchSubmit(event) {\r\n        const { searchCity } = this.state;\r\n        this.needsToFetchWeather(searchCity) ? this.fetchWeather(searchCity) : this.fetchPreviousWeather(searchCity);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        const { currentCity, isFetched, searchCity } = this.state;\r\n        const { city, country, timezone, temperatureList } = (isFetched && currentCity) || {};\r\n        // console.log(currentCity);\r\n        return (\r\n            <div className=\"weather\" >\r\n                {isFetched ?\r\n                    <>\r\n                        <div className=\"weather-top\">\r\n                            <DateTime\r\n                                timezone={timezone}\r\n                            />\r\n                            <Form\r\n                                value={searchCity}\r\n                                onChange={this.onSearchChange}\r\n                                onSubmit={this.onSearchSubmit}\r\n                            />\r\n                            <Area\r\n                                country={country}\r\n                                city={city}\r\n                            />\r\n                        </div>\r\n\r\n                        <TemperatureList\r\n                            temperatureList={temperatureList}\r\n                        />\r\n                    </>\r\n                    : null}\r\n            </ div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { searchCity } = this.state;\r\n        this.fetchWeather(searchCity);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/index.css';\r\n// import App from './App';\r\nimport Weather from './Weather';\r\n\r\nReactDOM.render(<Weather />, document.getElementById('root'));"],"sourceRoot":""}